//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace System {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Strings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Strings() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("System.Strings", typeof(Strings).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One or more errors occurred..
        /// </summary>
        internal static string AggregateException_ctor_DefaultMessage {
            get {
                return ResourceManager.GetString("AggregateException_ctor_DefaultMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An element of innerExceptions was null..
        /// </summary>
        internal static string AggregateException_ctor_InnerExceptionNull {
            get {
                return ResourceManager.GetString("AggregateException_ctor_InnerExceptionNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}{1}---&gt; (Inner Exception #{2}) {3}{4}{5}.
        /// </summary>
        internal static string AggregateException_ToString {
            get {
                return ResourceManager.GetString("AggregateException_ToString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No tokens were supplied..
        /// </summary>
        internal static string CancellationToken_CreateLinkedToken_TokensIsEmpty {
            get {
                return ResourceManager.GetString("CancellationToken_CreateLinkedToken_TokensIsEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The CancellationTokenSource associated with this CancellationToken has been disposed..
        /// </summary>
        internal static string CancellationToken_SourceDisposed {
            get {
                return ResourceManager.GetString("CancellationToken_SourceDisposed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The CancellationTokenSource has been disposed..
        /// </summary>
        internal static string CancellationTokenSource_Disposed {
            get {
                return ResourceManager.GetString("CancellationTokenSource_Disposed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SyncRoot property may not be used for the synchronization of concurrent collections..
        /// </summary>
        internal static string ConcurrentCollection_SyncRoot_NotSupported {
            get {
                return ResourceManager.GetString("ConcurrentCollection_SyncRoot_NotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The array is multidimensional, or the type parameter for the set cannot be cast automatically to the type of the destination array..
        /// </summary>
        internal static string ConcurrentDictionary_ArrayIncorrectType {
            get {
                return ResourceManager.GetString("ConcurrentDictionary_ArrayIncorrectType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The index is equal to or greater than the length of the array, or the number of elements in the dictionary is greater than the available space from index to the end of the destination array..
        /// </summary>
        internal static string ConcurrentDictionary_ArrayNotLargeEnough {
            get {
                return ResourceManager.GetString("ConcurrentDictionary_ArrayNotLargeEnough", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The capacity argument must be greater than or equal to zero..
        /// </summary>
        internal static string ConcurrentDictionary_CapacityMustNotBeNegative {
            get {
                return ResourceManager.GetString("ConcurrentDictionary_CapacityMustNotBeNegative", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The concurrencyLevel argument must be positive..
        /// </summary>
        internal static string ConcurrentDictionary_ConcurrencyLevelMustBePositive {
            get {
                return ResourceManager.GetString("ConcurrentDictionary_ConcurrencyLevelMustBePositive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The index argument is less than zero..
        /// </summary>
        internal static string ConcurrentDictionary_IndexIsNegative {
            get {
                return ResourceManager.GetString("ConcurrentDictionary_IndexIsNegative", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TKey is a reference type and item.Key is null..
        /// </summary>
        internal static string ConcurrentDictionary_ItemKeyIsNull {
            get {
                return ResourceManager.GetString("ConcurrentDictionary_ItemKeyIsNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The key already existed in the dictionary..
        /// </summary>
        internal static string ConcurrentDictionary_KeyAlreadyExisted {
            get {
                return ResourceManager.GetString("ConcurrentDictionary_KeyAlreadyExisted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The source argument contains duplicate keys..
        /// </summary>
        internal static string ConcurrentDictionary_SourceContainsDuplicateKeys {
            get {
                return ResourceManager.GetString("ConcurrentDictionary_SourceContainsDuplicateKeys", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The key was of an incorrect type for this dictionary..
        /// </summary>
        internal static string ConcurrentDictionary_TypeOfKeyIncorrect {
            get {
                return ResourceManager.GetString("ConcurrentDictionary_TypeOfKeyIncorrect", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value was of an incorrect type for this dictionary..
        /// </summary>
        internal static string ConcurrentDictionary_TypeOfValueIncorrect {
            get {
                return ResourceManager.GetString("ConcurrentDictionary_TypeOfValueIncorrect", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The lazily-initialized type does not have a public, parameterless constructor..
        /// </summary>
        internal static string Lazy_CreateValue_NoParameterlessCtorForT {
            get {
                return ResourceManager.GetString("Lazy_CreateValue_NoParameterlessCtorForT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ValueFactory returned null..
        /// </summary>
        internal static string Lazy_StaticInit_InvalidOperation {
            get {
                return ResourceManager.GetString("Lazy_StaticInit_InvalidOperation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The spinCount argument must be in the range 0 to {0}, inclusive..
        /// </summary>
        internal static string ManualResetEventSlim_ctor_SpinCountOutOfRange {
            get {
                return ResourceManager.GetString("ManualResetEventSlim_ctor_SpinCountOutOfRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There are too many threads currently waiting on the event. A maximum of {0} waiting threads are supported..
        /// </summary>
        internal static string ManualResetEventSlim_ctor_TooManyWaiters {
            get {
                return ResourceManager.GetString("ManualResetEventSlim_ctor_TooManyWaiters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The event has been disposed..
        /// </summary>
        internal static string ManualResetEventSlim_Disposed {
            get {
                return ResourceManager.GetString("ManualResetEventSlim_Disposed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation was canceled..
        /// </summary>
        internal static string OperationCanceled {
            get {
                return ResourceManager.GetString("OperationCanceled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The condition argument is null..
        /// </summary>
        internal static string SpinWait_SpinUntil_ArgumentNull {
            get {
                return ResourceManager.GetString("SpinWait_SpinUntil_ArgumentNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The timeout must represent a value between -1 and Int32.MaxValue, inclusive..
        /// </summary>
        internal static string SpinWait_SpinUntil_TimeoutWrong {
            get {
                return ResourceManager.GetString("SpinWait_SpinUntil_TimeoutWrong", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified TaskContinuationOptions combined LongRunning and ExecuteSynchronously.  Synchronous continuations should not be long running..
        /// </summary>
        internal static string Task_ContinueWith_ESandLR {
            get {
                return ResourceManager.GetString("Task_ContinueWith_ESandLR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified TaskContinuationOptions excluded all continuation kinds..
        /// </summary>
        internal static string Task_ContinueWith_NotOnAnything {
            get {
                return ResourceManager.GetString("Task_ContinueWith_NotOnAnything", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to (Internal)An attempt was made to create a LongRunning SelfReplicating task..
        /// </summary>
        internal static string Task_ctor_LRandSR {
            get {
                return ResourceManager.GetString("Task_ctor_LRandSR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value needs to translate in milliseconds to -1 (signifying an infinite timeout), 0 or a positive integer less than or equal to Int32.MaxValue..
        /// </summary>
        internal static string Task_Delay_InvalidDelay {
            get {
                return ResourceManager.GetString("Task_Delay_InvalidDelay", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value needs to be either -1 (signifying an infinite timeout), 0 or a positive integer..
        /// </summary>
        internal static string Task_Delay_InvalidMillisecondsDelay {
            get {
                return ResourceManager.GetString("Task_Delay_InvalidMillisecondsDelay", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A task may only be disposed if it is in a completion state (RanToCompletion, Faulted or Canceled)..
        /// </summary>
        internal static string Task_Dispose_NotCompleted {
            get {
                return ResourceManager.GetString("Task_Dispose_NotCompleted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is invalid to specify TaskCreationOptions.LongRunning in calls to FromAsync..
        /// </summary>
        internal static string Task_FromAsync_LongRunning {
            get {
                return ResourceManager.GetString("Task_FromAsync_LongRunning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is invalid to specify TaskCreationOptions.PreferFairness in calls to FromAsync..
        /// </summary>
        internal static string Task_FromAsync_PreferFairness {
            get {
                return ResourceManager.GetString("Task_FromAsync_PreferFairness", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is invalid to specify TaskCreationOptions.SelfReplicating in calls to FromAsync..
        /// </summary>
        internal static string Task_FromAsync_SelfReplicating {
            get {
                return ResourceManager.GetString("Task_FromAsync_SelfReplicating", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to FromAsync was called with a TaskManager that had already shut down..
        /// </summary>
        internal static string Task_FromAsync_TaskManagerShutDown {
            get {
                return ResourceManager.GetString("Task_FromAsync_TaskManagerShutDown", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The tasks argument contains no tasks..
        /// </summary>
        internal static string Task_MultiTaskContinuation_EmptyTaskList {
            get {
                return ResourceManager.GetString("Task_MultiTaskContinuation_EmptyTaskList", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is invalid to exclude specific continuation kinds for continuations off of multiple tasks..
        /// </summary>
        internal static string Task_MultiTaskContinuation_FireOptions {
            get {
                return ResourceManager.GetString("Task_MultiTaskContinuation_FireOptions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The tasks argument included a null value..
        /// </summary>
        internal static string Task_MultiTaskContinuation_NullTask {
            get {
                return ResourceManager.GetString("Task_MultiTaskContinuation_NullTask", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to RunSynchronously may not be called on a task that was already started..
        /// </summary>
        internal static string Task_RunSynchronously_AlreadyStarted {
            get {
                return ResourceManager.GetString("Task_RunSynchronously_AlreadyStarted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to RunSynchronously may not be called on a continuation task..
        /// </summary>
        internal static string Task_RunSynchronously_Continuation {
            get {
                return ResourceManager.GetString("Task_RunSynchronously_Continuation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to RunSynchronously may not be called on a task not bound to a delegate, such as the task returned from an asynchronous method..
        /// </summary>
        internal static string Task_RunSynchronously_Promise {
            get {
                return ResourceManager.GetString("Task_RunSynchronously_Promise", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to RunSynchronously may not be called on a task that has already completed..
        /// </summary>
        internal static string Task_RunSynchronously_TaskCompleted {
            get {
                return ResourceManager.GetString("Task_RunSynchronously_TaskCompleted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start may not be called on a task that was already started..
        /// </summary>
        internal static string Task_Start_AlreadyStarted {
            get {
                return ResourceManager.GetString("Task_Start_AlreadyStarted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start may not be called on a continuation task..
        /// </summary>
        internal static string Task_Start_ContinuationTask {
            get {
                return ResourceManager.GetString("Task_Start_ContinuationTask", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start may not be called on a task with null action..
        /// </summary>
        internal static string Task_Start_NullAction {
            get {
                return ResourceManager.GetString("Task_Start_NullAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start may not be called on a promise-style task..
        /// </summary>
        internal static string Task_Start_Promise {
            get {
                return ResourceManager.GetString("Task_Start_Promise", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start may not be called on a task that has completed..
        /// </summary>
        internal static string Task_Start_TaskCompleted {
            get {
                return ResourceManager.GetString("Task_Start_TaskCompleted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The task has been disposed..
        /// </summary>
        internal static string Task_ThrowIfDisposed {
            get {
                return ResourceManager.GetString("Task_ThrowIfDisposed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The tasks array included at least one null element..
        /// </summary>
        internal static string Task_WaitMulti_NullTask {
            get {
                return ResourceManager.GetString("Task_WaitMulti_NullTask", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The awaited task has not yet completed..
        /// </summary>
        internal static string TaskAwaiter_TaskNotCompleted {
            get {
                return ResourceManager.GetString("TaskAwaiter_TaskNotCompleted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A task was canceled..
        /// </summary>
        internal static string TaskCanceledException_ctor_DefaultMessage {
            get {
                return ResourceManager.GetString("TaskCanceledException_ctor_DefaultMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The exceptions collection was empty..
        /// </summary>
        internal static string TaskCompletionSourceT_TrySetException_NoExceptions {
            get {
                return ResourceManager.GetString("TaskCompletionSourceT_TrySetException_NoExceptions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The exceptions collection included at least one null element..
        /// </summary>
        internal static string TaskCompletionSourceT_TrySetException_NullException {
            get {
                return ResourceManager.GetString("TaskCompletionSourceT_TrySetException_NullException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Task&apos;s exception(s) were not observed either by Waiting on the Task or accessing its Exception property. As a result, the unobserved exception was rethrown by the finalizer thread..
        /// </summary>
        internal static string TaskExceptionHolder_UnhandledException {
            get {
                return ResourceManager.GetString("TaskExceptionHolder_UnhandledException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to (Internal)Expected an Exception or an IEnumerable&lt;Exception&gt;.
        /// </summary>
        internal static string TaskExceptionHolder_UnknownExceptionType {
            get {
                return ResourceManager.GetString("TaskExceptionHolder_UnknownExceptionType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ExecuteTask may not be called for a task which was already executed..
        /// </summary>
        internal static string TaskScheduler_ExecuteTask_TaskAlreadyExecuted {
            get {
                return ResourceManager.GetString("TaskScheduler_ExecuteTask_TaskAlreadyExecuted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ExecuteTask may not be called for a task which was previously queued to a different TaskScheduler..
        /// </summary>
        internal static string TaskScheduler_ExecuteTask_WrongTaskScheduler {
            get {
                return ResourceManager.GetString("TaskScheduler_ExecuteTask_WrongTaskScheduler", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The current SynchronizationContext may not be used as a TaskScheduler..
        /// </summary>
        internal static string TaskScheduler_FromCurrentSynchronizationContext_NoCurrent {
            get {
                return ResourceManager.GetString("TaskScheduler_FromCurrentSynchronizationContext_NoCurrent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The TryExecuteTaskInline call to the underlying scheduler succeeded, but the task body was not invoked..
        /// </summary>
        internal static string TaskScheduler_InconsistentStateAfterTryExecuteTaskInline {
            get {
                return ResourceManager.GetString("TaskScheduler_InconsistentStateAfterTryExecuteTaskInline", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An exception was thrown by a TaskScheduler..
        /// </summary>
        internal static string TaskSchedulerException_ctor_DefaultMessage {
            get {
                return ResourceManager.GetString("TaskSchedulerException_ctor_DefaultMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is invalid to specify TaskCreationOptions.SelfReplicating for a Task&lt;TResult&gt;..
        /// </summary>
        internal static string TaskT_ctor_SelfReplicating {
            get {
                return ResourceManager.GetString("TaskT_ctor_SelfReplicating", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {Not yet computed}.
        /// </summary>
        internal static string TaskT_DebuggerNoResult {
            get {
                return ResourceManager.GetString("TaskT_DebuggerNoResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A task&apos;s Exception may only be set directly if the task was created without a function..
        /// </summary>
        internal static string TaskT_SetException_HasAnInitializer {
            get {
                return ResourceManager.GetString("TaskT_SetException_HasAnInitializer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to transition a task to a final state when it had already completed..
        /// </summary>
        internal static string TaskT_TransitionToFinal_AlreadyCompleted {
            get {
                return ResourceManager.GetString("TaskT_TransitionToFinal_AlreadyCompleted", resourceCulture);
            }
        }
    }
}
