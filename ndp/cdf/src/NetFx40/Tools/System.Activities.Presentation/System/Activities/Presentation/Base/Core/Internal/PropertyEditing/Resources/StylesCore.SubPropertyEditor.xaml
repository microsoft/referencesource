<ResourceDictionary
    x:Uid="ResourceDictionary_1" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:Data="clr-namespace:System.Activities.Presentation.Internal.PropertyEditing.FromExpression.Framework.Data"
    xmlns:Framework="clr-namespace:System.Activities.Presentation.Internal.PropertyEditing.FromExpression.Framework.PropertyInspector"
    xmlns:ValueEditors="clr-namespace:System.Activities.Presentation.Internal.PropertyEditing.FromExpression.Framework.ValueEditors" 
    xmlns:PropertyEditing="clr-namespace:System.Activities.Presentation.PropertyEditing" 
    xmlns:Internal="clr-namespace:System.Activities.Presentation.Internal.PropertyEditing" 
    xmlns:InternalEditors="clr-namespace:System.Activities.Presentation.Internal.PropertyEditing.Editors"
    xmlns:InternalAutomation="clr-namespace:System.Activities.Presentation.Internal.PropertyEditing.Automation"
    xmlns:InternalSelection="clr-namespace:System.Activities.Presentation.Internal.PropertyEditing.Selection" 
    >

  <!-- Converters -->
  <Data:BoolToVisibilityCollapsedConverter x:Uid="Data:BoolToVisibilityCollapsedConverter_1" x:Key="BoolToVisibilityCollapsedConverter"/>
  <Data:BoolToVisibilityCollapsedConverter x:Uid="Data:BoolToVisibilityCollapsedConverter_2" x:Key="BoolToVisibilityCollapsedConverterInverted" InvertBoolean="True"/>
  <Data:BoolToVisibilityHiddenConverter x:Uid="Data:BoolToVisibilityHiddenConverter_1" x:Key="BoolToVisibilityHiddenConverter"/>
  <Data:NotConverter x:Uid="Data:NotConverter_1" x:Key="NotConverter"/>
  <InternalAutomation:TextFormatConverter x:Uid="InternalAutomation:TextFormatConverter_1" x:Key="SubPropertyEditorAutomationIdFormatConverter" Format="{}{0}SubPropertyEditor"/>
  <InternalEditors:NewItemFactoryTypeModelToTypeNameConverter x:Uid="NewItemFactoryTypeModelToTypeNameConverter_1" x:Key="NewItemFactoryTypeModelToTypeNameConverter"/>




  <!-- *********************** -->
  <!-- SubPropertyEditor Style -->
  <!-- *********************** -->
  
  <!-- DataContext = Could be anything, depending on use -->
  <Style x:Uid="Style_1" TargetType="{x:Type InternalEditors:SubPropertyEditor}">
    <Style.Setters>

      <Setter x:Uid="Setter_1" Property="Focusable" Value="False"/>
      <Setter x:Uid="Setter_2" Property="AutomationProperties.AutomationId" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(PropertyEditing:PropertyContainer.OwningPropertyContainer).PropertyEntry.PropertyName, Converter={StaticResource SubPropertyEditorAutomationIdFormatConverter}}"/>
      <Setter x:Uid="Setter_3" Property="Template">
        <Setter.Value>
          <ControlTemplate x:Uid="ControlTemplate_1" TargetType="{x:Type InternalEditors:SubPropertyEditor}">

            <StackPanel x:Uid="StackPanel_1" Orientation="Vertical">
              
              <!-- Property name & Type combo row -->
              
              <!-- PropertyPanel is a simple panel that acts as a horizontal StackPanel, making sure it's
                   last child gets a pre-determined amount of space.  Basically, it's a simplified and much
                   more performant version of Grid used for single property editing. -->
              
              <Internal:PropertyPanel
                x:Uid="Internal:PropertyPanel_1"
                LastChildWidth="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Internal:SharedPropertyValueColumnWidthContainer.OwningSharedPropertyValueColumnWidthContainer).ValueColumnWidth.Value}"
                Level="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PropertyEntry.Depth}"
                OutlineBrush="{DynamicResource {x:Static Internal:PropertyInspectorMergedResources.PaneBrushKey}}"
                IgnoreFirstChildBackground="True"
                >
                
                <!-- When the property is selected, change the SelectionBrush color accordingly -->
                <Internal:PropertyPanel.Style>
                  <Style x:Uid="Style_2" TargetType="{x:Type Internal:PropertyPanel}">
                    <Style.Triggers>
                      <DataTrigger x:Uid="DataTrigger_1" Value="True" Binding="{Binding RelativeSource={RelativeSource Self}, Path=(PropertyEditing:PropertyContainer.OwningPropertyContainer).(InternalSelection:PropertySelection.IsSelected)}">
                        <Setter x:Uid="Setter_4" Property="Internal:PropertyPanel.SelectionBrush" Value="{DynamicResource {x:Static Internal:PropertyInspectorMergedResources.SelectedBackgroundBrushKey}}"/>
                      </DataTrigger>
                      <DataTrigger x:Uid="DataTrigger_2" Value="False" Binding="{Binding RelativeSource={RelativeSource Self}, Path=(PropertyEditing:PropertyContainer.OwningPropertyContainer).(InternalSelection:PropertySelection.IsSelected)}">
                        <Setter x:Uid="Setter_5" Property="Internal:PropertyPanel.SelectionBrush" Value="Transparent"/>
                      </DataTrigger>
                    </Style.Triggers>
                  </Style>
                </Internal:PropertyPanel.Style>

                <!-- Expand / Collapse button -->
                <ToggleButton
                  x:Uid="ToggleButton_1" x:Name="ExpandButton"
                  Focusable ="False"
                  HorizontalAlignment="Left"
                  IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                  Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsExpandable, Mode=OneWay, Converter={StaticResource BoolToVisibilityHiddenConverter}}"
                  Width="13">

                  <ToggleButton.Content>
                    <Image x:Uid="Image_1" x:Name="ButtonImage" Height="9" Width="9" SnapsToDevicePixels="True"/>
                  </ToggleButton.Content>

                  <ToggleButton.Template>
                    <ControlTemplate x:Uid="ControlTemplate_2" TargetType="ToggleButton">
                      <Border x:Uid="Border_1" Background="Transparent" BorderBrush="{x:Null}">
                        <ContentControl x:Uid="ContentControl_1" Content="{TemplateBinding Content}"/>
                      </Border>
                    </ControlTemplate>
                  </ToggleButton.Template>
                </ToggleButton>

                <!-- Name area -->
                <TextBlock
                  x:Uid="TextBlock_1" Focusable="True"
                  FocusVisualStyle="{x:Null}"
                  Margin="5,2,2,2"
                  VerticalAlignment="Center"
                  TextTrimming="CharacterEllipsis"
                  Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PropertyEntry.DisplayName}"
                  FontSize="{DynamicResource {x:Static Internal:PropertyInspectorMergedResources.FontSizeKey}}"
                  FontFamily="{DynamicResource {x:Static Internal:PropertyInspectorMergedResources.FontFamilyKey}}" 
                  Padding="0,0,5,0"
                  InternalSelection:PropertySelection.KeyDownTarget="{Binding ElementName=SubPropertyValueContentPresenter}"
                  >

                  <TextBlock.ToolTip>
                    <StackPanel x:Uid="StackPanel_2" Orientation="Horizontal">
                      <TextBlock x:Uid="TextBlock_2" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PropertyEntry.DisplayName, Mode=OneTime}"/>
                      <TextBlock x:Uid="TextBlock_3" Text=": "/>
                      <TextBlock x:Uid="TextBlock_4" FontWeight="Bold" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PropertyEntry.PropertyType.Name, Mode=OneTime}"/>
                    </StackPanel>
                  </TextBlock.ToolTip>
                  
                  <!-- When the property is selected, change the text Foreground color -->
                  <TextBlock.Style>
                    <Style x:Uid="Style_3" TargetType="{x:Type TextBlock}">
                      <Style.Triggers>
                        <DataTrigger x:Uid="DataTrigger_3" Value="True" Binding="{Binding RelativeSource={RelativeSource Self}, Path=(PropertyEditing:PropertyContainer.OwningPropertyContainer).(InternalSelection:PropertySelection.IsSelected)}">
                          <Setter x:Uid="Setter_6" Property="Foreground" Value="{DynamicResource {x:Static Internal:PropertyInspectorMergedResources.SelectedForegroundBrushKey}}"/>
                        </DataTrigger>
                        <DataTrigger x:Uid="DataTrigger_4" Value="False" Binding="{Binding RelativeSource={RelativeSource Self}, Path=(PropertyEditing:PropertyContainer.OwningPropertyContainer).(InternalSelection:PropertySelection.IsSelected)}">
                          <Setter x:Uid="Setter_7" Property="Foreground" Value="{DynamicResource {x:Static Internal:PropertyInspectorMergedResources.TextBrushKey}}"/>
                        </DataTrigger>
                      </Style.Triggers>
                    </Style>
                  </TextBlock.Style>

                </TextBlock>

                <!-- Wrap the last column into a single control, because the width of *last* control in the list
                     is what PropertyPanel uses to create the correct layout -->
                <Grid x:Uid="Grid_1" Margin="0,0,1,1" VerticalAlignment="Center" x:Name="SubPropertyValueContentPresenter">
                  <!-- Combo for new types -->
                  <InternalAutomation:AutomatedChoiceEditor
                    x:Uid="InternalAutomation:AutomatedChoiceEditor_1" x:Name="PART_ValueEditor" 
                    Grid.Column="2"
                    ViewType="Combo"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CurrentQuickType, Mode=TwoWay}"
                    IsEnabled="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PropertyEntry.IsReadOnly, Converter={StaticResource NotConverter}}"
                    ItemsSource="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=QuickTypes, Mode=OneWay}"
                    ItemTemplateSelector="{DynamicResource QuickItemTemplateSelector}"
                    AutomationValueConverter="{StaticResource NewItemFactoryTypeModelToTypeNameConverter}"
                    TextSearch.TextPath="DisplayName"
                    VerticalAlignment="Center"
                    HorizontalAlignment="Stretch"
                    Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=HasQuickTypes, Mode=OneWay, Converter={StaticResource BoolToVisibilityCollapsedConverter}}"
                  />

                  <!-- Text "No types to select" -->
                  <TextBlock
                    x:Uid="TextBlock_5" Grid.Column="2"
                    Padding="3,0,3,0"
                    Foreground="{DynamicResource {x:Static Internal:PropertyInspectorMergedResources.BorderBrushKey}}"
                    Text="Value must be set in XAML"
                    ToolTip="Value must be set in XAML"  
                    VerticalAlignment="Center"
                    HorizontalAlignment="Stretch"
                    Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=HasQuickTypes, Mode=OneWay, Converter={StaticResource BoolToVisibilityCollapsedConverterInverted}}"
                    FontSize="{DynamicResource {x:Static Internal:PropertyInspectorMergedResources.FontSizeKey}}"
                    FontFamily="{DynamicResource {x:Static Internal:PropertyInspectorMergedResources.FontFamilyKey}}" 
                  />
                </Grid>

              </Internal:PropertyPanel>

              <!-- Sub-property list -->
              
              <!-- Note that we bind to SelectiveSubProperties instead of just SubProperties so that we don't evaluate
                   the list of sub-properties until the user expands the list because it's expensive -->
              
              <Internal:CiderStandardCategoryLayout
                x:Uid="PART_SubPropertyList" Name="PART_SubPropertyList" 
                Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsExpanded, Mode=OneWay, Converter={StaticResource BoolToVisibilityCollapsedConverter}}"
                ItemsSource="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SelectiveSubProperties, Mode=OneWay}"/>

            </StackPanel>

            <ControlTemplate.Triggers>
              <Trigger x:Uid="Trigger_1" SourceName="ExpandButton" Property="IsChecked" Value="False">
                <Setter x:Uid="Setter_9" TargetName="ButtonImage" Property="Source">
                  <Setter.Value>
                    <!-- this DrawingImage should be kept the same as the one in StylesCore.CategoryContainer.xaml with x:Uid DrawingImage_1 -->
                    <DrawingImage x:Uid="DrawingImage_1">
                      <DrawingImage.Drawing>
                        <GeometryDrawing x:Uid="GeometryDrawing_14" Brush="{x:Null}" >
                          <GeometryDrawing.Pen>
                            <Pen x:Uid="Pen_11" Brush="{DynamicResource {x:Static Internal:PropertyInspectorMergedResources.TextBrushKey}}" />
                          </GeometryDrawing.Pen>
                          <GeometryDrawing.Geometry>
                            <GeometryGroup x:Uid="GeometryGroup_1">
                              <RectangleGeometry x:Uid="RectangleGeometry_3" Rect="0,0,8,8"/>
                              <LineGeometry x:Uid="LineGeometry_1" StartPoint="4,2" EndPoint="4,6"/>
                              <LineGeometry x:Uid="LineGeometry_2" StartPoint="2,4" EndPoint="6,4"/>
                            </GeometryGroup>
                          </GeometryDrawing.Geometry>
                        </GeometryDrawing>
                      </DrawingImage.Drawing>
                    </DrawingImage>
                  </Setter.Value>
                </Setter>
              </Trigger>
              <Trigger x:Uid="Trigger_2" SourceName="ExpandButton" Property="IsChecked" Value="True">
                <Setter x:Uid="Setter_8" TargetName="ButtonImage" Property="Source">
                  <Setter.Value>
                    <!-- this DrawingImage should be kept the same as the one in StylesCore.CategoryContainer.xaml with x:Uid DrawingImage_2 -->
                    <DrawingImage x:Uid="DrawingImage_2">
                      <DrawingImage.Drawing>
                        <GeometryDrawing x:Uid="GeometryDrawing_15" Brush="{x:Null}">
                          <GeometryDrawing.Pen>
                            <Pen x:Uid="Pen_12" Brush="{DynamicResource {x:Static Internal:PropertyInspectorMergedResources.TextBrushKey}}"/>
                          </GeometryDrawing.Pen>
                          <GeometryDrawing.Geometry>
                            <GeometryGroup x:Uid="GeometryGroup_2">
                              <RectangleGeometry x:Uid="RectangleGeometry_4" Rect="0,0,8,8"/>
                              <LineGeometry x:Uid="LineGeometry_3" StartPoint="2,4" EndPoint="6,4"/>
                            </GeometryGroup>
                          </GeometryDrawing.Geometry>
                        </GeometryDrawing>
                      </DrawingImage.Drawing>
                    </DrawingImage>
                  </Setter.Value>
                </Setter>
              </Trigger>
            </ControlTemplate.Triggers>

          </ControlTemplate>
        </Setter.Value>
      </Setter>
      
    </Style.Setters>
  </Style>

</ResourceDictionary>
